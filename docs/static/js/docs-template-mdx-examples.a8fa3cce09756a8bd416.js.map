{"version":3,"sources":["/Volumes/DATA/Projects/react-client-captcha/docs-template-mdx/examples.mdx","/Volumes/DATA/Projects/react-client-captcha/src/index.js","/Volumes/DATA/Projects/react-client-captcha/src/style.css"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","__position","__code","__scope","this","Playground","ClientCaptcha","React","useState","captchaCode","setCaptcha","captchaInput","setCaptchaInput","type","value","onChange","e","target","onClick","alert","chars","charsCount","width","height","fontSize","backgroundColor","fontColor","isMDXComponent","generateCode","captcha","i","index","Math","ceil","random","length","indexOf","push","join","generateCaptcha","fontFamily","ctx","canvasRef","current","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","split","createRef","retryIcon","containerClassName","captchaClassName","retryButtonClassName","retryImgClassName","retry","retryIconSize","className","ref","style","pointerEvents","id","src","alt","Component","defaultProps","cssClasses","retryButton","captchaContainer","module","exports"],"mappings":"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","file":"static/js/docs-template-mdx-examples.e570b445.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground } from \"docz\";\nimport ClientCaptcha from \"../src\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h1>\n    <h2 {...{\n      \"id\": \"basic-captcha\"\n    }}>{`Basic Captcha`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [captchaCode, setCaptcha] = React.useState()\\n  return (\\n    <div>\\n      <ClientCaptcha captchaCode={setCaptcha} />\\n      Current captcha code: {captchaCode}\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      ClientCaptcha\n    }} mdxType=\"Playground\">\n  {() => {\n        const [captchaCode, setCaptcha] = React.useState();\n        return <div>\n        <ClientCaptcha captchaCode={setCaptcha} mdxType=\"ClientCaptcha\" />\n        Current captcha code: {captchaCode}\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"captcha-with-input-and-validation\"\n    }}>{`Captcha With Input and Validation`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [captchaCode, setCaptcha] = React.useState()\\n  const [captchaInput, setCaptchaInput] = React.useState()\\n  const validateCaptcha = () => {\\n    if (captchaCode === captchaInput) alert(\\'Valid\\')\\n    else alert(\\'Invalid\\')\\n  }\\n  return (\\n    <div>\\n      <ClientCaptcha captchaCode={setCaptcha} />\\n      <input\\n        type=\\\"text\\\"\\n        value={captchaInput}\\n        onChange={e => setCaptchaInput(e.target.value)}\\n      />\\n      <button onClick={validateCaptcha}>Validate</button>\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      ClientCaptcha\n    }} mdxType=\"Playground\">\n  {() => {\n        const [captchaCode, setCaptcha] = React.useState();\n        const [captchaInput, setCaptchaInput] = React.useState();\n\n        const validateCaptcha = () => {\n          if (captchaCode === captchaInput) alert(\"Valid\");else alert(\"Invalid\");\n        };\n\n        return <div>\n        <ClientCaptcha captchaCode={setCaptcha} mdxType=\"ClientCaptcha\" />\n        <input type=\"text\" value={captchaInput} onChange={e => setCaptchaInput(e.target.value)} />\n        <button onClick={validateCaptcha}>Validate</button>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <Playground __position={2} __code={'() => {\\n  const [captchaCode, setCaptcha] = React.useState()\\n  return (\\n    <div>\\n      <ClientCaptcha\\n        captchaCode={setCaptcha}\\n        chars=\\\"ABCDEFGHIJK!@#$%^&*\\\"\\n        charsCount={6}\\n        width={300}\\n        height={100}\\n        fontSize={45}\\n        backgroundColor=\\\"#BD272D\\\"\\n        fontColor=\\\"#fff\\\"\\n      />\\n      Current captcha code: {captchaCode}\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      ClientCaptcha\n    }} mdxType=\"Playground\">\n  {() => {\n        const [captchaCode, setCaptcha] = React.useState();\n        return <div>\n        <ClientCaptcha captchaCode={setCaptcha} chars=\"ABCDEFGHIJK!@#$%^&*\" charsCount={6} width={300} height={100} fontSize={45} backgroundColor=\"#BD272D\" fontColor=\"#fff\" mdxType=\"ClientCaptcha\" />\n        Current captcha code: {captchaCode}\n      </div>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cssClasses from \"./style.css\";\n\nclass ClientCaptcha extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.captchaCode = \"\";\n  }\n\n  componentDidMount() {\n    this.generateCaptcha();\n  }\n\n  generateCode = () => {\n    const { chars, charsCount } = this.props;\n    const captcha = [];\n    for (let i = 0; i < charsCount; i += 1) {\n      const index = Math.ceil(Math.random() * chars.length);\n      if (chars[index] && captcha.indexOf(chars[index]) === -1)\n        captcha.push(chars[index]);\n      else i -= 1;\n    }\n    return captcha.join(\"\");\n  };\n\n  generateCaptcha = () => {\n    const {\n      width,\n      height,\n      fontSize,\n      captchaCode,\n      backgroundColor,\n      fontFamily,\n      fontColor\n    } = this.props;\n    this.captchaCode = this.generateCode();\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, width, height);\n    ctx.font = `${fontSize}px ${fontFamily}`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = fontColor;\n    ctx.fillText(this.captchaCode.split(\"\").join(\" \"), width / 2, height / 2);\n    captchaCode(this.captchaCode);\n  };\n\n  render() {\n    const {\n      width,\n      height,\n      retryIcon,\n      containerClassName,\n      captchaClassName,\n      retryButtonClassName,\n      retryImgClassName,\n      retry,\n      retryIconSize\n    } = this.props;\n    return (\n      <div className={containerClassName}>\n        <canvas\n          width={width}\n          height={height}\n          ref={this.canvasRef}\n          style={{ pointerEvents: \"none\" }}\n          className={captchaClassName}\n        />\n        {retry && (\n          <button\n            onClick={this.generateCaptcha}\n            id=\"retryButton\"\n            className={retryButtonClassName}\n          >\n            <img\n              src={retryIcon}\n              alt=\"Re-new captcha\"\n              className={retryImgClassName}\n              width={retryIconSize}\n              height={retryIconSize}\n            />\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nClientCaptcha.defaultProps = {\n  width: 100,\n  height: 40,\n  fontSize: 22,\n  fontFamily: \"Arial, Tahoma\",\n  fontColor: \"#000\",\n  chars: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n  charsCount: 4,\n  backgroundColor: \"#F2F2F2\",\n  retry: true,\n  retryIcon: \"https://cdn.jsdelivr.net/npm/react-client-captcha/dist/retry.svg\",\n  retryIconSize: 24,\n  retryButtonClassName: cssClasses.retryButton,\n  retryImgClassName: \"\",\n  containerClassName: cssClasses.captchaContainer,\n  captchaClassName: \"\"\n};\n\nClientCaptcha.propTypes = {\n  /**\n   * width of captcha image.\n   */\n  width: PropTypes.number.isRequired,\n  /**\n   * height of captcha image.\n   */\n  height: PropTypes.number.isRequired,\n  /**\n   * fontSize of captcha characters.\n   */\n  fontSize: PropTypes.number,\n  /**\n   * fontFamily of captcha characters.\n   */\n  fontFamily: PropTypes.string,\n  /**\n   * fontColor of captcha characters.\n   */\n  fontColor: PropTypes.string,\n  /**\n   * characters that captcha should be made with.\n   */\n  chars: PropTypes.string,\n  /**\n   * count of characters that captcha should be made with.\n   */\n  charsCount: PropTypes.number,\n  /**\n   * function that returns current shown captcha code.\n   */\n  captchaCode: PropTypes.func.isRequired,\n  /**\n   * backgroundColor of captcha image.\n   */\n  backgroundColor: PropTypes.string,\n  /**\n   * whether captcha has retry functionality\n   */\n  retry: PropTypes.bool,\n  /**\n   * the icon of retry button\n   */\n  retryIcon: PropTypes.string,\n  /**\n   * size of retry button icon\n   */\n  retryIconSize: PropTypes.number,\n  /**\n   * className of retry button\n   */\n  retryButtonClassName: PropTypes.string,\n  /**\n   * className of retry img\n   */\n  retryImgClassName: PropTypes.string,\n  /**\n   * className of captcha and retry button container div\n   */\n  containerClassName: PropTypes.string,\n  /**\n   * className of captcha image\n   */\n  captchaClassName: PropTypes.string\n};\n\nexport default ClientCaptcha;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captchaContainer\":\"style_captchaContainer__FWlJo\",\"retryButton\":\"style_retryButton__3Fwvw\"};"],"sourceRoot":""}